from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from dotenv import load_dotenv
from orders import find_product_by_code_ending, get_order, save_orders, _orders



# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
EMAIL_SENDER = os.getenv("EMAIL_SENDER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_RECIPIENT = os.getenv("EMAIL_RECIPIENT")
credentials_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials_path

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
if not all([BOT_TOKEN, EMAIL_SENDER, EMAIL_PASSWORD, EMAIL_RECIPIENT]):
    raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")

from orders import (
    init_order, update_order, get_order, save_user_order_state,
    send_order_email, write_order_to_archive, load_orders, save_orders
)

from products import find_product_by_code_ending

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class OrderState(StatesGroup):
    manager = State()
    client = State()
    product_code = State()
    confirm_product = State()
    product_qty = State()
    note = State()
    delivery_date = State()
    delivery_address = State()
    editing_product_choice = State()
    editing_product_qty = State()
    editing_details_choice = State()
    # —Ñ–ª–∞–≥ editing_mode —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ state.data (editing_mode: True/False)


# ----------------- START / MANAGER / CLIENT -----------------
@dp.message(Command("start"))
async def start(msg: types.Message, state: FSMContext):
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Alanika OrderBot!üëãüèª\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    init_order(msg.from_user.id)
    await state.set_state(OrderState.manager)


@dp.message(OrderState.manager)
async def set_manager(msg: types.Message, state: FSMContext):
    update_order(msg.from_user.id, "manager", msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(OrderState.client)


@dp.message(OrderState.client)
async def set_client(msg: types.Message, state: FSMContext):
    update_order(msg.from_user.id, "client", msg.text)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer(
        "‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4Ô∏è‚É£ —Ü–∏—Ñ—Ä –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.",
        reply_markup=keyboard
    )
    await state.set_state(OrderState.product_code)



# ----------------- PRODUCT CODE -> show product card with inline confirm -----------------
# ----------------- PRODUCT CODE -> show product card with inline confirm -----------------
@dp.message(OrderState.product_code)
async def handle_product_code(msg: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤–æ"
    if msg.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        order = get_order(msg.from_user.id)
        if not order or not order.get("products"):
            await msg.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.")
            return
        await msg.answer(
            "‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞:", 
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(OrderState.note)
        return

    text = msg.text.strip()
    if not (text.isdigit() and len(text) == 4):
        await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4Ô∏è‚É£ —Ü–∏—Ñ—Ä –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞.")
        return

    found_products = find_product_by_code_ending(text)
    if not found_products:
        await msg.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    elif len(found_products) == 1:
        product = found_products[0]
        await state.update_data(product=product)
        await show_product_card(msg, product, state)
        return

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    ikb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"{item['name']} (–∫–æ–¥ {item['code']})",
                callback_data=f"select_product_{idx}"
            )] for idx, item in enumerate(found_products)
        ]
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ state
    await state.update_data(found_products=found_products)
    await msg.answer("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:", reply_markup=ikb)


# ----------------- CALLBACK: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ -----------------
@dp.callback_query(lambda c: c.data.startswith("select_product_"))
async def cb_select_product(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    found_products = data.get("found_products", [])

    idx = int(call.data.split("_")[-1])
    if idx >= len(found_products):
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    product = found_products[idx]
    await state.update_data(product=product)
    await call.message.edit_reply_markup(None)  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞

    # –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–æ–±–∞–≤–∏—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å
    await show_product_card(call.message, product, state)


# ----------------- –§—É–Ω–∫—Ü–∏—è: –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ -----------------
async def show_product_card(msg_obj, product, state):
    info = (
        f"üîé –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:\n"
        f"üì¶ {product['name']}\n"
        f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product['stock']}\n"
        f"üïê –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {product['expiry']}\n"
        f"üí∂ –¶–µ–Ω–∞ –±–µ–∑ –ù–î–°: {product['price_no_vat']} ‚Ç¨\n"
        f"üí∂ –¶–µ–Ω–∞ —Å –ù–î–°: {product['price_with_vat']} ‚Ç¨\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?"
    )
    ikb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_product"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="cancel_product"),
            ]
        ]
    )
    await msg_obj.answer(info, reply_markup=ikb)
    await state.set_state(OrderState.confirm_product)



# ----------------- Inline callbacks for add/cancel product -----------------
@dp.callback_query(lambda c: c.data == "add_product")
async def cb_add_product(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    # —É–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∫–∞—Ä—Ç–æ—á–∫–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.product_qty)


@dp.callback_query(lambda c: c.data == "cancel_product")
async def cb_cancel_product(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=keyboard)
    await state.set_state(OrderState.product_code)


@dp.message(OrderState.confirm_product)
async def confirm_product_text(msg: types.Message, state: FSMContext):
    text = msg.text.strip().lower()
    if text in ("‚úÖ –¥–æ–±–∞–≤–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "–¥–∞"):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrderState.product_qty)
    elif text in ("‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–Ω–µ—Ç"):
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await msg.answer("–¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=keyboard)
        await state.set_state(OrderState.product_code)
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –î–æ–±–∞–≤–∏—Ç—å' –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä' (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ inline-–∫–Ω–æ–ø–∫–∏).")


# ----------------- PRODUCT QTY (adding product) -----------------
@dp.message(OrderState.product_qty)
async def handle_product_qty(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit() or int(msg.text) <= 0:
        await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    data = await state.get_data()
    product = data.get("product")
    if not product:
        await msg.answer("‚ùó –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(OrderState.product_code)
        return

    qty = int(msg.text)
    product["qty"] = qty
    product["sum_no_vat"] = round(float(product["price_no_vat"]) * qty, 2)
    product["sum_with_vat"] = round(float(product["price_with_vat"]) * qty, 2)
    product["code"] = product.get("code", "N/A")

    user_id = msg.from_user.id
    current = get_order(user_id)
    if not current:
        init_order(user_id)
        current = get_order(user_id)

    if "products" not in current or current["products"] is None:
        current["products"] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–ª–∞–≥ editing_mode)
    data = await state.get_data()
    editing_mode = data.get("editing_mode", False)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    current["products"].append(product)
    update_order(user_id, "products", current["products"])

    if editing_mode:
        # –°–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥ –∏ –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–Ω–µ –ø–µ—Ä–µ–≤–æ–¥—è –Ω–∞ note)
        await state.update_data(editing_mode=False)
        await send_order_preview(msg, user_id)
        await state.clear()
        return

    # –û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=keyboard)
    await state.set_state(OrderState.product_code)


# ----------------- NOTE / DELIVERY DATE / ADDRESS -----------------
@dp.message(OrderState.note)
async def handle_note(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    from_details = data.get("from_details_edit", False)

    update_order(msg.from_user.id, "note", msg.text)

    if from_details:
        # –æ—á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥ –∏ –≤–µ—Ä–Ω—ë–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await state.update_data(from_details_edit=False)
        await send_order_preview(msg, msg.from_user.id)
        await state.clear()
        return

    await msg.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.07):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.delivery_date)


@dp.message(OrderState.delivery_date)
async def handle_delivery_date(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    from_details = data.get("from_details_edit", False)

    update_order(msg.from_user.id, "delivery_date", msg.text)

    if from_details:
        await state.update_data(from_details_edit=False)
        await send_order_preview(msg, msg.from_user.id)
        await state.clear()
        return

    await msg.answer("üè¢ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.delivery_address)


@dp.message(OrderState.delivery_address)
async def handle_delivery_address(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    from_details = data.get("from_details_edit", False)

    update_order(msg.from_user.id, "delivery_address", msg.text)

    if from_details:
        await state.update_data(from_details_edit=False)
        await send_order_preview(msg, msg.from_user.id)
        await state.clear()
        return

    # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    await send_order_preview(msg, msg.from_user.id)
    await state.clear()


# ----------------- SEND ORDER PREVIEW (INLINE BUTTONS) -----------------
async def send_order_preview(msg_obj: types.Message | types.CallbackQuery, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ —Å 4 inline-–∫–Ω–æ–ø–∫–∞–º–∏:
    ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å | ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å (—Ç–æ–≤–∞—Ä—ã) | üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ | ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ/—á–∞—Ç –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    if isinstance(msg_obj, types.CallbackQuery):
        chat_msg = msg_obj.message
    else:
        chat_msg = msg_obj

    order = get_order(user_id)
    if not order:
        await chat_msg.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    products_list = ""
    for i, item in enumerate(order.get("products", []), 1):
        products_list += (
            f"{i}) {item['name']} ‚Äî {item['qty']} —à—Ç\n"
            f"   –°—Ä–æ–∫: {item.get('expiry')}\n"
            f"   –¶–µ–Ω–∞ –±–µ–∑ –ù–î–°: {item.get('price_no_vat')} ‚Ç¨ | —Å –ù–î–°: {item.get('price_with_vat')} ‚Ç¨\n"
            f"   ‚û°Ô∏è –°—É–º–º–∞: {item.get('sum_no_vat')} ‚Ç¨\n\n"
        )

    preview = (
        f"üßæ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞:\n"
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {order.get('manager')}\n"
        f"üíé –ö–ª–∏–µ–Ω—Ç: {order.get('client')}\n"
        f"üìÖ –î–æ—Å—Ç–∞–≤–∫–∞: {order.get('delivery_date')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address')}\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä—ã:\n{products_list}"
        f"üìã –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {order.get('note')}\n\n"
        f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    ikb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –¢–æ–≤–∞—Ä", callback_data="edit_products_cb"),
            ],
            [
                types.InlineKeyboardButton(text="‚¨ÖÔ∏è –î–µ—Ç–∞–ª–∏", callback_data="edit_details_cb"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order_cb"),
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
    await chat_msg.answer(preview, reply_markup=ikb)


# ----------------- Inline callbacks for preview actions -----------------
@dp.callback_query(lambda c: c.data == "confirm_order")
async def cb_confirm_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    user_id = call.from_user.id
    order = get_order(user_id)
    if not order:
        await call.message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    import asyncio
    asyncio.create_task(asyncio.to_thread(send_order_email, order))
    asyncio.create_task(asyncio.to_thread(write_order_to_archive, order))
    write_order_to_archive(order)
    orders = load_orders()
    orders.pop(str(user_id), None)
    save_orders(orders)

    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await call.message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∞—Ä—Ö–∏–≤!", reply_markup=kb)
    await state.clear()


@dp.callback_query(lambda c: c.data == "cancel_order_cb")
async def cb_cancel_order(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await call.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb)
    await state.clear()


@dp.callback_query(lambda c: c.data == "edit_products_cb")
async def cb_edit_products(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await show_edit_products(call.message, call.from_user.id, state)


@dp.callback_query(lambda c: c.data == "edit_details_cb")
async def cb_edit_details(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")],
            [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")],
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
    await state.set_state(OrderState.editing_details_choice)


# ----------------- show edit products (used by callback and text command) -----------------
async def show_edit_products(chat_msg: types.Message, user_id: int, state: FSMContext):
    order = get_order(user_id)
    products = order.get("products", [])
    if not products:
        await chat_msg.answer("–í –∑–∞–∫–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    text = "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
    for i, item in enumerate(products, 1):
        text += f"{i}) {item['name']} ‚Äî {item['qty']} —à—Ç\n"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ + –∫–Ω–æ–ø–∫–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" –∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–û—Ç–º–µ–Ω–∞"
    rows = [[types.KeyboardButton(text=str(i))] for i in range(1, len(products) + 1)]
    rows.append([types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")])
    rows.append([types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])

    keyboard = types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, one_time_keyboard=True)
    await chat_msg.answer(text, reply_markup=keyboard)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ editing_mode
    await state.update_data(editing_mode=True)
    await state.set_state(OrderState.editing_product_choice)


# ----------------- text handler "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" to open edit products (keeps compatibility) -----------------
@dp.message(lambda message: message.text and message.text.lower() == "‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å")
async def handle_edit_text(msg: types.Message, state: FSMContext):
    await show_edit_products(msg, msg.from_user.id, state)


# ----------------- choosing product or add new in edit mode -----------------
@dp.message(OrderState.editing_product_choice)
async def handle_editing_choice(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    order = get_order(msg.from_user.id)
    products = order.get("products", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"/"–ì–æ—Ç–æ–≤–æ"/"–û—Ç–º–µ–Ω–∞"
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä":
        # –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ editing_mode (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω), –∏ –ø—Ä–æ—Å–∏–º –∫–æ–¥
        await state.update_data(editing_mode=True)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4Ô∏è‚É£ —Ü–∏—Ñ—Ä –∫–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrderState.product_code)
        return

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        await send_order_preview(msg, msg.from_user.id)
        await state.clear()
        return

    if text.lower() == "–≥–æ—Ç–æ–≤–æ":
        # –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await send_order_preview(msg, msg.from_user.id)
        await state.clear()
        return

    if not text.isdigit():
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' / '–ì–æ—Ç–æ–≤–æ'.")
        return

    choice = int(text)
    if choice < 1 or choice > len(products):
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(edit_index=choice - 1)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (0 ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.editing_product_qty)


# ----------------- apply edited qty -> show preview (no redirect to note) -----------------
@dp.message(OrderState.editing_product_qty)
async def handle_editing_qty(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit() or int(msg.text) < 0:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).")
        return
    qty = int(msg.text)
    data = await state.get_data()
    idx = data.get("edit_index")
    if idx is None:
        await msg.answer("–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(OrderState.editing_product_choice)
        return

    order = get_order(msg.from_user.id)
    products = order.get("products", [])

    if idx < 0 or idx >= len(products):
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞.")
        await state.set_state(OrderState.editing_product_choice)
        return

    if qty == 0:
        products.pop(idx)
        await msg.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–∫–∞–∑–∞.")
    else:
        product = products[idx]
        product["qty"] = qty
        product["sum_no_vat"] = round(float(product["price_no_vat"]) * qty, 2)
        product["sum_with_vat"] = round(float(product["price_with_vat"]) * qty, 2)
        await msg.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product['name']}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {qty}.")

    update_order(msg.from_user.id, "products", products)

    # –ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ note)
    await send_order_preview(msg, msg.from_user.id)
    await state.clear()


# ----------------- editing details menu (text buttons chosen from preview) -----------------
@dp.message(lambda message: message.text and (
    message.text.lower() == "üõ† —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏"
    or message.text.lower() == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ"
    or message.text.lower() == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏"
    or message.text.lower() == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
))
async def handle_edit_details_text(msg: types.Message, state: FSMContext):
    text = msg.text.strip().lower()
    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "üõ† —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏" ‚Äî –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
    if text == "üõ† —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏":
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ")],
                [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")],
                [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")],
                [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
        await state.set_state(OrderState.editing_details_choice)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª —Å—é–¥–∞ –Ω–∞–ø—Ä—è–º—É—é (–æ–¥–∏–Ω –∏–∑ –ø–æ–¥-—ç–ª–µ–º–µ–Ω—Ç–æ–≤) ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ
    await handle_editing_details_choice(msg, state)


@dp.message(OrderState.editing_details_choice)
async def handle_editing_details_choice(msg: types.Message, state: FSMContext):
    text = msg.text.strip().lower()
    if text == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ" or text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ":
        await state.update_data(from_details_edit=True)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrderState.note)
    elif text == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏" or text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏":
        await state.update_data(from_details_edit=True)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28.07):", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrderState.delivery_date)
    elif text == "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" or text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏":
        await state.update_data(from_details_edit=True)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(OrderState.delivery_address)
    elif text == "–æ—Ç–º–µ–Ω–∞":
        await send_order_preview(msg, msg.from_user.id)
        await state.clear()
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ/–¥–∞—Ç—É/–∞–¥—Ä–µ—Å –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.")


# ----------------- legacy text handlers for confirm/cancel/create new order as fallback -----------------
@dp.message(lambda message: message.text and message.text.lower() == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def handle_submit_text(msg: types.Message, state: FSMContext):
    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ inline –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
    user_id = msg.from_user.id
    order = get_order(user_id)
    if not order:
        await msg.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    import asyncio
    asyncio.create_task(asyncio.to_thread(send_order_email, order))
    asyncio.create_task(asyncio.to_thread(write_order_to_archive, order))
    write_order_to_archive(order)
    orders = load_orders()
    orders.pop(str(user_id), None)
    save_orders(orders)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É!", reply_markup=kb)
    await state.clear()


@dp.message(lambda message: message.text and message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å")
async def handle_cancel_text(msg: types.Message, state: FSMContext):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb)
    await state.clear()


@dp.message(lambda message: message.text and message.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def handle_new_order(msg: types.Message, state: FSMContext):
    init_order(msg.from_user.id)
    await msg.answer("–ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.manager)


# ----------------- MAIN -----------------
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
